#!/usr/bin/env groovy
@Library("com.optum.jenkins.pipeline.library@master") _
 def app
 def AKS_CREDENTIAL_ID = "onb-nonprod-sp"

 pipeline{
              
       agent{
           label 'docker-azcli-kubectl-slave'
       }
     
       tools{
           maven 'Maven'
           jdk 'Java 1.8'
       }
       stages{
           stage('env configure') {
               steps{
                   sh '''
                   echo "PATH = ${PATH}"
                   echo "MAVEN_HOME = ${MAVEN_HOME}"
                   '''
               }
           }
           stage('checkout'){
             steps{
               script{
                 checkout scm
                   }
               }
           }

           stage('spring-config-server-api-test'){
               steps{
                   script{
                       sh "mvn clean package -DskipTests"
                   }
               }
           }

           stage('Registring image and Docker image Build'){
              steps{
                   script{
                       app = docker.build("spring-config-server-api-test")
                   }
               }
           }

           stage('Push image to ACR with buildno tag'){
               steps{
                   script{
                       //You would need to first register with ACR before you can push images to your account

                       docker.withRegistry('https://oeotstuscacr.azurecr.io', 'oeotstuscacr') {
                       app.push("latest")
                       app.push("${env.BUILD_NUMBER}")
                       }
                   }
               }
           }


           stage ('ACR deployment in AKS cluster'){
                  steps{
                      script{
                            withCredentials([azureServicePrincipal(credentialsId: "${AKS_CREDENTIAL_ID}",
                                     subscriptionIdVariable: 'SUBS_ID',
                                     clientIdVariable: 'CLIENT_ID',
                                     clientSecretVariable: 'CLIENT_SECRET',
                                     tenantIdVariable: 'TENANT_ID')]) {
  
                              sh '''
                            
                              RESOURCE_GROUP=""

                              if [[ $ENVIRONMENT_NAME == "performance" ]] ; then
                                   RESOURCE_GROUP=ocp-prf-us-c-rg
                                   echo "RESOURCE_GROUP: $RESOURCE_GROUP"
                                   
                                   elif [[ $ENVIRONMENT_NAME == "stage" ]] ; then
                                     RESOURCE_GROUP=ocp-stg-us-c-rg
                                     echo "RESOURCE_GROUP: $RESOURCE_GROUP"

                                   elif [[ $ENVIRONMENT_NAME == "test" ]] ; then
                                     RESOURCE_GROUP=oeo-tst-us-c-rg
                                     echo "RESOURCE_GROUP: $RESOURCE_GROUP"
                                   fi

                              CLUSTER_NAME=""
                              
                              if [[ $ENVIRONMENT_NAME == "test" ]] ; then
                              CLUSTER_NAME=oeo-tst-us-c-aks
                              echo "CLUSTER NAME: $CLUSTER_NAME"
                              
                              
                              
                              elif [[ $ENVIRONMENT_NAME == "stage" ]] ; then
                              CLUSTER_NAME=oeo-stg-us-c-aks
                              echo "CLUSTER NAME: $CLUSTER_NAME"
                              
                              elif [[ $ENVIRONMENT_NAME == "prod" ]] ; then
                              CLUSTER_NAME=
                              echo "CLUSTER NAME: $CLUSTER_NAME"
                                  fi
                                  
                             az login --service-principal -u ${CLIENT_ID} -p ${CLIENT_SECRET} -t ${TENANT_ID}
                             az account list --output table
                             az aks get-credentials --resource-group ${RESOURCE_GROUP} --name ${CLUSTER_NAME}
                             kubectl get ns
                             
                             MODULE_NAME=spring-config-server-api-test
                             
                             KUBERNETES_NAMESPACE=test
                             ACR_HUB=oeotstuscacr.azurecr.io
                             ACR_USER=oeotstuscacr
                             
                             SERVICE_NAME=${MODULE_NAME}-svc
                             DEPLOYMENT_NAME=${MODULE_NAME}-dep

                             
                         
                             
                             echo "Target AKS cluster: $CLUSTER_NAME"
                             
                             
                             # Create or update the deployment
                             
                             echo $(kubectl --namespace=$KUBERNETES_NAMESPACE  get deployments) > deployments_list.txt
                             
                             if grep "$DEPLOYMENT_NAME" deployments_list.txt
                             then
                                             echo "********************************************************************************************************"
                                 echo "Deployment $DEPLOYMENT_NAME is available. Updating now."
                                             echo "********************************************************************************************************"
                                 #kubectl --namespace=$KUBERNETES_NAMESPACE --kubeconfig config patch deployment ${DEPLOYMENT_NAME} -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"$MODULE_NAME\",\"image\":\"orxhemiacrreg.azurecr.io/$MODULE_NAME:$BUILD_NUMBER\"}]}}}}"
                                 sed "s/latest/$BUILD_NUMBER/g" $WORKSPACE/deployment/$ENVIRONMENT_NAME/deploy.yml > $WORKSPACE/deployment/$ENVIRONMENT_NAME/deploy-$BUILD_NUMBER.yml
                                 cat $WORKSPACE/deployment/$ENVIRONMENT_NAME/deploy-$BUILD_NUMBER.yml
                                 kubectl --namespace=$KUBERNETES_NAMESPACE  apply -f $WORKSPACE/deployment/$ENVIRONMENT_NAME/deploy-$BUILD_NUMBER.yml
                             else
                                             echo "********************************************************************************************************"
                                 echo "Deployment $DEPLOYMENT_NAME is NOT available. Deploying now."
                                             echo "********************************************************************************************************"
                             
                                 #sed "s/latest/$BUILD_NUMBER/g" $WORKSPACE/deploy.yml > $WORKSPACE/deployment/$ENVIRONMENT_NAME/deploy-$BUILD_NUMBER.yml
                                 cat $WORKSPACE/deployment/$ENVIRONMENT_NAME/deploy.yml
                                 kubectl --namespace=$KUBERNETES_NAMESPACE create -f $WORKSPACE/deployment/$ENVIRONMENT_NAME/deploy.yml
                                 docker rmi -f ${MODULE_NAME}:latest
                             fi
                             
                             #=========================================================================
                             
                             # Create or update the service
                             
                             echo $(kubectl --namespace=$KUBERNETES_NAMESPACE  get services) > services_list.txt
                             
                             if grep "$SERVICE_NAME" services_list.txt
                             then
                                             echo "********************************************************************************************************"
                                 echo "Service $SERVICE_NAME already exists. No need to create again."
                                 echo "********************************************************************************************************"
                             else
                                             echo "********************************************************************************************************"
                                 echo "Service $SERVICE_NAME is NOT deployed. Deploying now."
                                 echo "********************************************************************************************************"
                                 cat $WORKSPACE/deployment/$ENVIRONMENT_NAME/service.yml
                                 kubectl --namespace=$KUBERNETES_NAMESPACE  create -f $WORKSPACE/deployment/$ENVIRONMENT_NAME/service.yml
                             fi
                             
                            '''
                        }
                  }
               }
              }
             
}
}
