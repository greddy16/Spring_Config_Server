#!/usr/bin/env groovy

@Library("com.optum.jenkins.pipeline.library@v0.3.0") _
  
def app
def dyabalurcredentials = "dyabalurcredentials"

def getEnvName(RESOURCE_GROUP) {
    if("test".equals(ENVIRONMENT_NAME)) {
    return "oeo-tst-us-c-rg";
    } else if ("stage".equals(ENVIRONMENT_NAME)) {
    return "oeo-stg-us2-e-rg";
    } else if ("perf".equals(ENVIRONMENT_NAME)) {
    return "oeo-prf-us-c-rg";
    } else if ("prod".equals(ENVIRONMENT_NAME)) {
    return "oeo-prd-us-c-rg";
    } else {
    return "please set the environment and cluster";
    break;
    }
}

def getModuleName(MODULE_NAME) {
    if("test".equals(ENVIRONMENT_NAME)) {
    return "spring-config-server-api-test";
    } else if ("stage".equals(ENVIRONMENT_NAME)) {
    return "spring-config-server-api-stage";
    } else if ("perf".equals(ENVIRONMENT_NAME)) {
    return "spring-config-server-api-perf";
    } else if ("prod".equals(ENVIRONMENT_NAME)) {
    return "spring-config-server-api-prod";
    } else {
    return "please set the environment and cluster";
    break;
    }
}

def getClusterName(AKS_CLUSTER_NAME) {
    if("test".equals(ENVIRONMENT_NAME)) {
    return "oeo-tst-us-c-aks";
    } else if ("stage".equals(ENVIRONMENT_NAME)) {
    return "oeo-stg-us2-e-aks";
    } else if ("perf".equals(ENVIRONMENT_NAME)) {
    return "oeo-prf-us-c-aks";
    } else if ("prod".equals(ENVIRONMENT_NAME)) {
    return "oeo-prd-us-c-aks";
    } else {
    return "please set the environment and cluster";
    break;
    }
}

  pipeline{
               
        agent{
            label 'docker-azcli-kubectl-slave'
        }
      
        tools{
            maven 'Maven'
            jdk 'Java 1.8'
        }
        environment {
            RESOURCE_GROUP   = getEnvName(env.ENVIRONMENT_NAME)
            MODULE_NAME      = getModuleName(MODULE_NAME)
            CLUSTER_NAME     = getClusterName(env.ENVIRONMENT_NAME)
        }

        parameters {
            choice(name: 'ENVIRONMENT_NAME', choices: ['test','stage','perf','prod'], description: 'Provide the branch name to build')
            //choice(name: 'BRANCH_NAME', choices: ['develop','release'], description: 'Provide the branch name to build')
            //string(name: 'VERSION', defaultValue: 'v1.0', description: 'Provide the version number to build', trim: false)
            //choice(name: 'FUNCTION_APP', choices: ['pn-tst-us-c-azfun','pn-stg-us-c-azfun','pn-prf-us-c-azfun','pn-prd-us-c-azfun'], description: 'Provide the branch name to build')
        }

        stages{
            stage('Build details') {
                steps {
                    echo '########################################################'
                    //echo 'BRANCH                : ' + env.BRANCH_NAME
                    echo 'ENVITONMENT           : ' + env.ENVIRONMENT_NAME
                    echo 'AKS CLUSTER           : ' + env.CLUSTER_NAME
                    echo 'RESOURCE GROUP NAME   : ' + env.RESOURCE_GROUP
                    echo '########################################################'
                }
            }
            stage('env configure') {
                steps{
                    sh '''
                    echo "PATH = ${PATH}"
                    echo "MAVEN_HOME = ${MAVEN_HOME}"
                    '''
                }
            }

            stage('checkout'){
              steps{
                script{
                  checkout scm
                    }
                }
            }

            stage('spring-config-server-api'){
                steps{
                    script{
                        sh "mvn clean package -DskipTests"
                    }
                }
            }
            
           
            stage('Registring image and Docker image Build'){
               steps{
                    script{
                      app = docker.build("${MODULE_NAME}")
                    }
                }
            }

            stage('Push image to ACR with buildno tag'){
                steps{
                    script{
                        //You would need to first register with ACR before you can push images to your account
 
                        docker.withRegistry('https://oeostgus2eacr.azurecr.io', 'oeostgus2eacr') {
                        app.push("latest")
                        app.push("${env.BUILD_NUMBER}")
                        }
                    }
                }
            }
 
            stage ('ACR deployment in AKS cluster'){
                steps{
                    script{
                        withCredentials([azureServicePrincipal('onb-nonprod-sp')]) {
                        sh '''
                        . /etc/profile.d/jenkins.sh
                        az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID
                        az account list --output table
                        az aks get-credentials --resource-group ${RESOURCE_GROUP} --name ${CLUSTER_NAME}

                        MODULE_NAME=${MODULE_NAME}
                        KUBERNETES_NAMESPACE=${ENVIRONMENT_NAME}
                        ACR_HUB=oeostgus2eacr.azurecr.io
                        ACR_USER=oeostgus2eacr
                        SERVICE_NAME=${MODULE_NAME}-svc
                        DEPLOYMENT_NAME=${MODULE_NAME}-dep
                        # Create or update the deployment
                        echo $(kubectl --namespace=$KUBERNETES_NAMESPACE get deployments) > deployments_list.txt
                        if grep "$DEPLOYMENT_NAME" deployments_list.txt
                        then
                            echo "********************************************************************************************************"
                            echo "Deployment $DEPLOYMENT_NAME is available. Updating now."
                            echo "********************************************************************************************************"
                            #kubectl --namespace=$KUBERNETES_NAMESPACE patch deployment ${DEPLOYMENT_NAME} -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"$MODULE_NAME\",\"image\":\"orxhemiacrreg.azurecr.io/$MODULE_NAME:$BUILD_NUMBER\"}]}}}}"
                            sed "s/latest/$BUILD_NUMBER/g" $WORKSPACE/deployment/$ENVIRONMENT_NAME/deploy.yml > $WORKSPACE/deployment/$ENVIRONMENT_NAME/deploy-$BUILD_NUMBER.yml
                            cat $WORKSPACE/deployment/$ENVIRONMENT_NAME/deploy-$BUILD_NUMBER.yml
                            kubectl --namespace=$KUBERNETES_NAMESPACE apply -f $WORKSPACE/deployment/$ENVIRONMENT_NAME/deploy-$BUILD_NUMBER.yml
                        else
                            echo "********************************************************************************************************"
                            echo "Deployment $DEPLOYMENT_NAME is NOT available. Deploying now."
                            echo "********************************************************************************************************"
                        
                            #sed "s/latest/$BUILD_NUMBER/g" $WORKSPACE/deploy.yml > $WORKSPACE/deployment/$ENVIRONMENT_NAME/deploy-$BUILD_NUMBER.yml
                            cat $WORKSPACE/deployment/$ENVIRONMENT_NAME/deploy.yml
                            kubectl --namespace=$KUBERNETES_NAMESPACE create -f $WORKSPACE/deployment/$ENVIRONMENT_NAME/deploy.yml
                            docker rmi -f ${MODULE_NAME}:latest
                        fi
                        #========================================================================= 
                        # Create or update the service
                        echo $(kubectl --namespace=$KUBERNETES_NAMESPACE get services) > services_list.txt
                        if grep "$SERVICE_NAME" services_list.txt
                        then
                            echo "********************************************************************************************************"
                            echo "Service $SERVICE_NAME already exists. No need to create again."
                            echo "********************************************************************************************************"
                        else
                            echo "********************************************************************************************************"
                            echo "Service $SERVICE_NAME is NOT deployed. Deploying now."
                            echo "********************************************************************************************************"
                            cat $WORKSPACE/deployment/$ENVIRONMENT_NAME/service.yml
                            kubectl --namespace=$KUBERNETES_NAMESPACE create -f $WORKSPACE/deployment/$ENVIRONMENT_NAME/service.yml
                        fi
                        '''
                        }
                        }
                    }
                }
            }
}
